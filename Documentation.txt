Lexical Analyzer and Parser
This project involves the creation of a lexical analyzer and parser for interpreting the C language, focusing primarily on arithmetic expressions. The development process required a thorough understanding of the grammatical structure of programming languages. Specifically, a form of Backus-Naur Form (BNF) grammar that was adapted for this task. The primary goal was to enable the system to recognize and process basic syntax elements such as identifiers, integer literals, and arithmetic operators, and to construct a parse tree for expressions involving these elements.
BNF grammar:
<expression>: An expression consists of terms separated by addition (+) or subtraction (-) operators. 
<term>: A term is made up of factors that can be multiplied (*) or divided (/). 
<factor>: A factor can be an identifier (variable name), an integer literal, or a nested expression within parentheses. 
<identifier>: Identifiers start with a letter followed by any combination of letters and digits. 
<integer-literal>: Integer literals are sequences of digits representing whole numbers.
The lexical analyzer's job is to scan through the source code, character by character, to identify the smallest units of meaning, known as tokens. These tokens include identifiers, integer literals, arithmetic operators (+, -, *, /), and grouping symbols such as parentheses and braces. The analyzer is implemented through several key functions:
lex(): is the core function of the lexical analyzer, responsible for reading characters from the source file and categorizing them into tokens. It uses a state machine logic to determine the type of token based on the current character's classification.
 getChar(): reads the next character from the source file and classifies it as a letter, digit, unknown character, or end-of-file marker. This classification helps in further processing by the lex() function.
 addChar(): adds the current character to a buffer (lexeme) if it is part of a token being built. This function ensures that tokens are constructed correctly from consecutive characters in the source file. lookup(char ch): Determines the token type of single-character operators and punctuation. It also adds the character to the lexeme buffer. 
getNonBlank(): skips whitespace characters to find the start of the next token or meaningful syntax element in the source file.
Parser
Built upon the lexical analyzer, the parser examines the stream of tokens to identify the grammatical structure of the source code. It constructs a parse tree that represents the hierarchical structure of expressions found in the code. The parser is designed using a recursive parsing technique, which involves several mutually recursive functions:
expression(): Parses expressions, handling operations like addition and subtraction between terms.
 term(): Parses terms within expressions, dealing with multiplication and division operations between factors.
 factor(): Handles the parsing of the simplest elements in an expression, such as identifiers, integer literals, or expressions enclosed in parentheses.
Throughout the development, standardized naming conventions were followed to ensure code readability and maintainability. Constants representing token types and character classes are named in uppercase letters (e.g., INT_LIT, IDENT), following the C programming tradition for constants. Functions are named using camelCase notation (e.g., getChar(), addChar()), making them easily distinguishable from constants.
By implementing a lexical analyzer and parser, I gained insights into the importance of grammar in programming languages, the process of tokenization, and the construction of parse trees to understand the syntactic structure of code. This project helps me understand the process of translating human-readable code into a form that a computer can interpret and execute.
While working on the lexical analyzer and parser project, I initially planned to organize the program across multiple C files to keep things organized. However, I encountered some linking and referencing issues which made it challenging to manage the code effectively across different files. Functions and variables defined in one file were not easily accessible in others, which is a big issue for the components of the lexical analyzer and parser to work together.
 To overcome this, I decided to combine everything into a single C file. This made the development process much smoother, eliminating the complexities of cross file references and simplifying compilation and debugging. This change was a practical solution that helped me focus on the project's educational goals, teaching me valuable lessons about the complexities of program organization and the C language.
To document this even further I have my code on Github. My goal was to consistently push it when adding a function or two with a meaningful commit message, however, I did not stay in front of this and stopped committing as consistently as I should have. In the future, I need to not forget this as it is important to be pushing changes in code section by section as opposed to just a couple of pushes whenever.
Testing:
I used a text document 
input.txt to test my project.
 #include <stdio.h>
int main() {
    int x = 10;
    int y = 20;
    int z = x + y;

    printf("Sum is: %d\n", z);
    return 0;
}
To be specific i used the command gcc -o myprogram full.c to make a .exe file then issued the command ./myprogram.exe input.txt
The output was
 Next token is: 99, Next lexeme is #
Next token is: 11, Next lexeme is include
Next token is 25, Next lexeme is (
Next token is  26, Next lexeme is )
Next token is: 27, Next lexeme is {
Next token is 10, Next lexeme is 20
Next token is:28, Next lexeme is }
Next token is: -1, Next lexeme is EOF
Note: there was more output. I just showed different values assigned to what.
My definitions: 
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99




#define INT_LIT 10
#define IDENT 11
#define PLUS_OP 21
#define MINUS_OP 22
#define MULT_OP 23
#define DIV_OP 24
#define LEFT_PAREN 25
#define RIGHT_PAREN 26
#define END_OF_FILE -1
#define LEFT_BRACE 27
#define RIGHT_BRACE 28


